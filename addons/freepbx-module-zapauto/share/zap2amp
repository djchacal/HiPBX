#! /usr/bin/perl -w

#   Written by Diego Iastrubni <diego.iastrubni@xorcom.com>
#   Copyright (C) 2005, 2009 Xorcom
#  
#   All rights reserved.
#  
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#  
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#  
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  

# read /etc/zaptel.conf and for each FXS channel found
# generate AMP configuration, by writing directly to
# mysql, and writing to asterisk DB
#
# the basis of the configurtaion will be taken from a template
# which will be applied to each FXS channel found.
#
# Digital NT spans will be consideted some sort of "phones". They
# will be assumed to be ISDN PRI/BRI and configured accordingly.

use strict;
use DBI;
	
my @zapinfo;
my @zap_template;
my $zaptel_conf = "/etc/zaptel.conf";
my $dahdi_conf = "/etc/dahdi/system.conf";
if ( -d '/proc/dahdi' ) {
	$zaptel_conf = $dahdi_conf;
}
my $zap_template_name = "/var/lib/asterisk/bin/zap.template";
my $amportal_conf = "/etc/amportal.conf";
my $ampconf;

# database connection, lazy code
my $dbh;
my $sql_statement;
my $result;

# start counting DAHDI extentions from 201.
# may be modified from amportal.conf
# Set ZAP_FIRST_CHANNEL=nnn to use 'nnn' instead of 201 .
my $extension_num = 201;

# Set ASTRIBANK_IOPORTS_ENABLED=no or false in /etc/amportal.conf to disable
# assigning extensions to Astribank digital I/O ports.
my $ab_ioports_enabled = 1;

# the following two are used to follow hints from genzaptelconf in zaptel.conf
# that require context-awareness.
my $termtype = '';
my $astbanktype = '';

# we detect on runtime which freepbx to support
my $freepbx_version;


my $debug = 0;


#####################
# functions

# sub print_db_errors
# -------------------
#
# in case of a dbi error, this sub will print all needed information to the user
#
sub print_db_errors
{
	print "dbh->selectall_arrayref($sql_statement) failed!\n";
	print "DBI::err=[$DBI::err]\n";
	print "DBI::errstr=[$DBI::errstr]\n";
}

# sub clear_zaptel_from_sql
# -------------------------
# read the available zap channels on mysql, and then
# delete them and the corresponding extension
sub clear_zaptel_from_sql
{
 	$sql_statement = "SELECT id FROM `zap` WHERE keyword = 'account'";
 	$result = $dbh->selectall_arrayref($sql_statement);
 	unless ($result) 
 	{
 		print_db_errors();
 		die("Could not connect to database");
 	}
	
	foreach my $row ( @{ $result } ) 
	{
		my $id = @{ $row }[0];
		if ($debug==1) { print "Deleting ZAPATA channel $id\n"; }
	
		if ($freepbx_version < 2.3) { 	
			$sql_statement = "DELETE FROM `extensions` WHERE `extension` = '$id'";
			unless ($dbh->do( $sql_statement ) )
			{
				print_db_errors();
				exit(-1);
			}
		}
		
		if ($debug==1) { printf( "$sql_statement\n" ); }
		
		$sql_statement = "DELETE FROM `zap` WHERE `id` = '$id'";
		unless ($dbh->do( $sql_statement ) )
		{
			print_db_errors();
			exit(-1);
		}
		
		$sql_statement = "DELETE FROM `users` WHERE `extension` = '$id'";
		if ($debug==1) { printf( "$sql_statement\n" ); }
		$dbh->do( $sql_statement );
		unless ($dbh->do( $sql_statement ) )
		{
			print_db_errors();
			exit(-1);
		}
	
		$sql_statement = "DELETE FROM `devices` WHERE `id` = '$id' and `tech` = 'zap'";
		if ($debug==1) { printf( "$sql_statement\n" ); }
		$dbh->do( $sql_statement );
		unless ($dbh->do( $sql_statement ) )
		{
			print_db_errors();
			exit(-1);
		}
	}
}	

# sub reg_channel
# ---------------
# stores values into tables "zap", "extensions", "users" and "devices"
# TODO: 
# split this huge function into 5 functions, one for each database. and last
# for astdb.
# if possible move the function up (currently needs the $dbh connection
sub reg_channel($$) 
{
	my ($channel, $data) = @_;
	my $extension =  $extension_num;
	my $discard_me="-#-NULL-#-";  # We will assign this "strange" value to parameters that 
								  # mustn't be added to database because of 
								  # particular freePBX version requirements. 
	
	$sql_statement = "SELECT * FROM `devices` where dial='ZAP/$channel'";
	$result = @{ $dbh->selectall_arrayref($sql_statement) };
	
	if (  $result != 0 )
	{
		# channel already registered
		return;
	} 
	
	my $name = "ZAP channel $channel";
	$data->{EXTENSION}   = $extension;
	$data->{CHANNEL}     = $channel;
	$data->{GROUP}       = 5;
	$data->{IMMEDIATE}   = 'no';
	$data->{CONTEXT}     = 'from-internal';

	if ($freepbx_version < 2.5) {
		$data->{CALLGROUP}   = $discard_me;
		$data->{PICKUPGROUP} = $discard_me;
	} else {
		# the defaults in freePBX are lame, they are "", which de-facto breaks call pickup
		$data->{CALLGROUP}   = "1";
		$data->{PICKUPGROUP} = "1";
	}

	if ($astbanktype ne '' ){
		$data->{CONTEXT} = $astbanktype;
		if ($astbanktype eq 'input') {
			$name = "AB Input $channel";
			$data->{IMMEDIATE} = 'yes';
		} elsif ($astbanktype eq 'output') {
			$name = "AB output $channel";
		}
		# I don't even know how this can break shit, so I don't take chances
		$data->{CALLGROUP}   = "NULL";
		$data->{PICKUPGROUP} = "NULL";
	}
	$data->{NAME}    = $name;

	my @extra_lines = ();
	if (exists $data->{SWITCHTYPE}) {
		push @extra_lines,("switchtype\t__SWITCHTYPE__");
	}

	# sql table - zap
	foreach my $line (@extra_lines,@zap_template)
	{
		$_ = $line;
		chomp;
		next if /^#/;
		next unless /\S/;
		
		s/__([A-Z]*)__/$data->{$1}/g;
		
		# the keyword is the first word before the TAB,
		# the data, is everything
		my ($sql_keyword, $sql_data) = split(/\s+/, $_, 2);
		if ($sql_keyword && $sql_data)
		{
			next if $sql_data eq $discard_me;
			if ($sql_data eq "NULL" ) { $sql_data = ""; }
			$sql_statement = "INSERT INTO zap VALUES ('$extension_num','$sql_keyword','$sql_data',0)";
			if ($debug==1) { printf( "$sql_statement\n" ); }
			unless ($dbh->do( $sql_statement ) )
			{
				print_db_errors();
				exit(-1);
			}
		}
	}

	# sql table - extensions
	if ($freepbx_version < 2.3) {
		my $context = "ext-local";
		my $priority = "1";
		my $application = "Macro";
		my $args = "exten-vm\\,novm\\,$extension_num";
		my $descr = "NULL";
		my $flags = "0";

		$sql_statement = "INSERT INTO extensions VALUES ('$context','$extension','$priority','$application','$args',$descr,'$flags')\n";
		if ($debug==1) { printf( "$sql_statement\n" ); }
		unless ($dbh->do( $sql_statement ) )
		{
			print_db_errors();
			exit(-1);
		}
	}

	# sql table - users
	$extension	= $extension_num;
	my $password	= "";	# no password is set for zaptel devices
	my $voicemail	= "";	# give mo voicemail by default
	if ($freepbx_version > 2.2) {
		$voicemail	= "novm";
	}
	my $ringtimer	= "0"; 
	my $noanswer	= "";
	my $recording	= "out=Adhoc|in=Adhoc" ;
	my $outboundcid	= "";
	my $directdid	= "";
	my $didalert	= "";
	my $faxexten	= "";
	my $faxemail	= "";
	my $answer	= "";
	my $wait	= "";
	my $privacyman	= "";
	my $mohclass	= "";
	my $noanswer_cid = "";
	my $busy_cid	= "";
	my $chanunavail_cid = "";
	my $noanswer_dest = "";
	my $busy_dest	= "";
	my $chanunavail_dest = "";
	if ($freepbx_version >= 2.7) {
		$mohclass = "default";
	}
	my $sipname	= "";

	if ($freepbx_version == 2.1) {
		$sql_statement = "INSERT INTO users VALUES ( '$extension', '$password', '$name', '$voicemail', '$ringtimer', '$noanswer', '$recording', '$outboundcid', '$directdid', '$didalert' )\n";
	}
	elsif ($freepbx_version == 2.2) {
		$sql_statement = "INSERT INTO users VALUES ( '$extension', '$password', '$name', '$voicemail', '$ringtimer', '$noanswer', '$recording', '$outboundcid', '$directdid', '$didalert', '$faxexten', '$faxemail', '$answer', '$wait', '$privacyman' )\n";
	}
        elsif ($freepbx_version == 2.3 || $freepbx_version == 2.4) {
		$sql_statement = "INSERT INTO users VALUES ( '$extension', '$password', '$name', '$voicemail', '$ringtimer', '$noanswer', '$recording', '$outboundcid', '$directdid', '$didalert', '$faxexten', '$faxemail', '$answer', '$wait', '$privacyman', '$mohclass', '$sipname' )\n";
        }
        elsif ($freepbx_version == 2.5 || $freepbx_version == 2.6 || $freepbx_version == 2.7) {
		$sql_statement = "INSERT INTO users VALUES ( '$extension', '$password', '$name', '$voicemail', '$ringtimer', '$noanswer', '$recording', '$outboundcid', '$sipname', '$mohclass' )\n";
        }
	 elsif ($freepbx_version == 2.8 || $freepbx_version == 2.9) {
		$sql_statement = "INSERT INTO users VALUES ( '$extension', '$password', '$name', '$voicemail', '$ringtimer', '$noanswer', '$recording', '$outboundcid', '$sipname', '$noanswer_cid', '$busy_cid', '$chanunavail_cid', '$noanswer_dest', '$busy_dest', '$chanunavail_dest', '$mohclass' )\n";
        }
	
	if ($debug==1) { printf( "$sql_statement\n" ); }
	unless ($dbh->do( $sql_statement ) )
	{
		print_db_errors();
		exit(-1);
	}
	if ($debug==1) { printf ( "Extension: $name - $extension_num \n" ); }

	# sql table - devices
	my $dial = "ZAP/$channel";
	$sql_statement = "INSERT INTO devices VALUES ('$extension_num','zap','$dial','fixed', '$extension_num','$name','')";
	if ($debug==1) { printf( "$sql_statement\n" ); }
	unless ($dbh->do( $sql_statement ) )
	{
		print_db_errors();
		exit(-1);
	}

	$extension_num++;
} #sub reg_channel end


sub parse_amportal_conf
{
        my $filename = $_[0];
        my %ampconf;

        open(AMPCONF, $filename) || die "Cannot open $filename";

        while (<AMPCONF>)
        {
                if ($_ =~ /^\s*([a-zA-Z0-9_]+)\s*=\s*(.*)\s*([;#].*)?/)
                {
                        $ampconf{$1} = $2;
                }
        }
        close(AMPCONF);

        return \%ampconf;
}

#####################
# main

# fist parse amportal.conf to get the correct information
# about the username and password for mysql
$ampconf = parse_amportal_conf( "/etc/amportal.conf" );

my $database  = $$ampconf{"AMPDBNAME"};
my $hostname  = $$ampconf{"AMPDBHOST"}; 
my $username  = $$ampconf{"AMPDBUSER"};
my $password  = $$ampconf{"AMPDBPASS"};
my $db_engine = "mysql";
if (exists($ampconf->{"AMPDBENGINE"})) {
	$db_engine = $ampconf->{"AMPDBENGINE"};
}

# connect to the DB
if ( $db_engine eq "mysql" ) {
	$dbh = DBI->connect("dbi:mysql:dbname=$database;host=$hostname", "$username", "$password");
}
elsif ( $db_engine eq "pgsql" ) {
	$dbh = DBI->connect("dbi:pgsql:dbname=$database;host=$hostname", "$username", "$password");
}
elsif ( $db_engine eq "sqlite" ) {
	if (!exists($ampconf->{"AMPDBFILE"})) {
		print "No AMPDBFILE set in /etc/amportal.conf\n";
		exit;
	}
	
	my $db_file = $ampconf->{"AMPDBFILE"};
	$dbh = DBI->connect("dbi:SQLite2:dbname=$db_file","","");
}
elsif ( $db_engine eq "sqlite3" ) {
	if (!exists($ampconf->{"AMPDBFILE"})) {
		print "No AMPDBFILE set in /etc/amportal.conf\n";
		exit;
	}
	
	my $db_file = $ampconf->{"AMPDBFILE"};
	$dbh = DBI->connect("dbi:SQLite:dbname=$db_file","","");
}


# detect freepbx version, 2.1 or 2.2
# this script supports both 2.1 and 2.2 versions
$sql_statement = "SELECT value FROM admin WHERE variable = 'version'";
if ($debug==1) { printf( "$sql_statement\n" ); }
$result = $dbh->selectall_arrayref($sql_statement);
unless ($result) 
{
	print_db_errors();
	die("Could not connect to database");
}

foreach my $row ( @{ $result } ) 
{
	my $version = @{ $row }[0];
	if ( $version =~ /^(2\.[123456789])/ ){
		$freepbx_version = $1;
		if ($debug==1) { printf( "Using freePBX $freepbx_version\n" ); }
	}
	else{
		die("Unsupported freePBX version : " . $version );
	}
}

# try and get the first ZAP number configured in amportal.conf
# if none found, we still have the good old default
if ( ! $$ampconf{"ZAP_FIRST_CHANNEL"} eq "" )
{
	$extension_num = $$ampconf{"ZAP_FIRST_CHANNEL"};
}

if ( ! $$ampconf{"ASTRIBANK_IOPORTS_ENABLED"} eq "" )
{
	if ($$ampconf{"ASTRIBANK_IOPORTS_ENABLED"} =~ /[nN][oO]/ || $$ampconf{"ASTRIBANK_IOPORTS_ENABLED"} =~ /[fF][aA][lL][sS][eE]/) {
		$ab_ioports_enabled = 0;
	}
}

# read the zaptel.conf file, and latter on parse it
open( PROC_ENTRY, $zaptel_conf ) or die( "Cannot read $zaptel_conf, aborting." );
@zapinfo = <PROC_ENTRY>;
close( PROC_ENTRY );

# read the template in advance
open( ZAP_TEMPLATE, $zap_template_name ) or die( "Cannot read $zap_template_name, aborting." );
@zap_template = <ZAP_TEMPLATE>;
close( ZAP_TEMPLATE );

# delete the old information found in the database
clear_zaptel_from_sql();

# for each zaptel channel found in $zaptel_conf, if it provides FXO signalling,
# then it's an FXS. Apply the template to that line, and generate
# SQL statements for adding the zap channel and then the new extension.
foreach my $line (@zapinfo)
{
	if ( $line =~ /\s*fxo([kl]s)\s*=\s*(\d*)/ )
	{
		if (($astbanktype eq '') || $ab_ioports_enabled) {
			reg_channel($2,{SIGNALLING=>"fxo_$1"});
		}
		$astbanktype = '';
	}
	elsif ( $line =~ /^# termtype: ([a-z]*)/) 
	{
		$termtype = $1;
	}
	elsif ( $line =~ /^# astbanktype: ([a-z]*)/) 
	{
		$astbanktype = $1;
	}
	elsif ( ($line =~ /\s*bchan\s*=\s*([0-9]*)(-([0-9]*|))/) && 
	  ($termtype eq 'nt') ) 
	{
		my @channels = ();
		my $val = $line;
		$val =~ s/;.*$//;
		$val =~ s/^\s*bchan\s*=\s*//;
		while ($val) {
			$val =~ /([0-9]*)(-([0-9]*|))/;
			my $chan = $1;
			my $chan_last = $chan;
			$termtype = '';

			if (defined $3) {
				$chan_last = $3;
			} else {
				$chan_last = $chan;
			}
			push @channels, ($chan .. $chan_last);

			# prepare for next iteration:
			last unless ($val =~ /,/);
			$val =~ s/^[^,]*,\s*//;
		}

		# FIXME: we guess the signalling from the span length
		# and not using what genzaptelconf used:
		my $signalling = 'pri_net';
		if ($#channels == 1) {
			$signalling = 'bri_net_ptmp';
		}
		for my $i (@channels) 
		{
			# TODO: kill the whole termtype functionality
			# properly
			#reg_channel($i,{
			#	SIGNALLING=>$signalling, 
			#	SWITCHTYPE=>'euroisdn'
			#});
		}
	}
} # end - foreach my $line (@zapinfo)

# need reload:
# - this will ensure that the user at least reloads asterisk,
#   he will usually need to restart asterisk, 
# - on TS1 it will force the user to save the configuration
$sql_statement = "UPDATE admin SET value = 'true' WHERE variable = 'need_reload'";
unless ($dbh->do( $sql_statement ) )
{
	print_db_errors();
	exit(-1);
}

if ($debug==1) { print( "Done\n" ); }
