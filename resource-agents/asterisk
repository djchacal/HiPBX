#!/bin/sh -x
#
# OCF Asterisk Resource Agent script.
# Copyright (c) 2011 Rob Thomas <xrobau@gmail.com>

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This RA was written as part of the HiPBX Project, a Highly-Avaliable PBX
# for Linux. http://hipbx.org

# OCF instance parameters
#       OCF_RESKEY_cmdline_options
#       OCF_RESKEY_logfile
#       OCF_RESKEY_user
#       OCF_RESKEY_group
#       OCF_RESKEY_stop_timeout

OCF_ROOT=/usr/lib/ocf
# Initialization:
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/resource.d/heartbeat}
. ${OCF_FUNCTIONS_DIR}/.ocf-shellfuncs

# defaults
directory="/usr/sbin"
logfile=" /var/run/asterisk/asterisk.out"
user="apache"
group="apache"
stop_timeout=3
pidfile="/var/run/saterisk/asterisk.pid"

[ ! -z "$OCF_RESKEY_directory" ] && directory="$OCF_RESKEY_directory"
[ ! -z "$OCF_RESKEY_logfile" ]  && logfile="$OCF_RESKEY_logfile"
[ ! -z "$OCF_RESKEY_user" ] && user="$OCF_RESKEY_user"
[ ! -z "$OCF_RESKEY_group" ] && group="$OCF_RESKEY_group"
[ ! -z "$OCF_RESKEY_stop_timeout" ] && stop_timeout="$OCF_RESKEY_stop_timeout"
[ ! -z "$OCF_RESKEY_pidfile" ] && pidfile="$OCF_RESKEY_pidfile"

instance_name="$OCF_RESOURCE_INSTANCE"
cmdline_options="$OCF_RESKEY_cmdline_options"

asterisk_status() {

	# Is there a pidfile, and is it valid?
	[ ! -f $pidfile] && return $OCF_NOT_RUNNING

	pid=$(cat $pidfile)
	
	# Is there a task with that pid?
	[ ! -d /proc/$pid ] && return $OCF_NOT_RUNNING

	# Is that task asterisk?
	[ $(readlink /proc/$pid/exe) != "$directory/asterisk" ] && return $OCF_NOT_RUNNING

	# All good. Now just make sure we can talk to it..
	if $(asterisk -rx "core show status" > /dev/null 2>&1) ; then
		return 0
	else
		return $OCF_NOT_RUNNING
	fi
}

asterisk_start() {
	ocf_log debug "Starting $instance_name:"
	[  $(asterisk_status; echo $?) -eq 0 ] && return $OCF_SUCCESS
	cmdline="$directory/asterisk -U$user -G$group $cmdline_options > $logfile 2>&1"
	$cmdline && return 0
	return 1
}

asterisk_stop() {
	ocf_log debug "Stopping $instance_name: "
	$directory/asterisk $cmdline_options -rx 'core stop gracefully' > $logfile 2>&1
	# Now, loop for at most $stop_timeout seconds waiting for asterisk_status to stop.
	nowt=$(date +%s)
	fint=$(( $nowt + $stop_timeout ))

	while [ $(asterisk_status; echo $?) -eq 0 ]; do
		ocf_log debug "Waiting for $instance_name to shut down"
		[ $(date +%s) -gt $fint ] && break
		sleep 0.2 # Sleep 200msec
	done

	[  $(asterisk_status; echo $?) -eq $OCF_NOT_RUNNING ] return $OCF_SUCCESS

	# It's still running. Possibly someone's still on a call. Sorry, but
	# we need to shut down.
	ocf_log debug "Forcing $instance_name to shut down"
	$directory/asterisk $cmdline_options -rx 'core stop now' > $logfile 2>&1
	sleep 1
	[  $(asterisk_status; echo $?) -eq $OCF_NOT_RUNNING ] && return $OCF_SUCCESS

	# If Asterisk is still running, something bad has happened inside it. It should
	# always shut down within a second of a 'core stop now'.  So we'll have to kill
	# it. Ready the shotgun.
	ocf_log debug "Killing $instance_namen"
	kill -9 $(cat $pidfile)

	# If you're still around now, I'm impressed.
	[  $(asterisk_status; echo $?) -eq $OCF_NOT_RUNNING ] && return $OCF_SUCCESS
	return 1
}

asterisk_monitor() {
	asterisk_status
#	if [ $? -eq $OCF_NOT_RUNNING ]; then
}

asterisk_validate() {
	return $OCF_SUCCESS
}

asterisk_meta() {
cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="asterisk">
<version>1.0</version>
<longdesc lang="en">
This is an OCF RA to manage Asterisk. It will try to auto-restart Asterisk 
if it finds it down for any reason (check in 'monitor'). This may be an unwanted
action, and if so, create a paramater of 'no-auto-restart' and set it to any
non-null string.

Note that a 'stop' will not immediately terminate Asterisk, and will wait 
the 'stop' timeout value for all calls to complete, before forcing a stop. 

There may need to be some fine-tuning of your settings, as Asterisk will not
accept calls whilst it's in a shutting-down state. So a too-long pause will
result in people not being able to create a new call whilst, for example,
someone is sending a 20 page Fax that will take 10 minutes to complete. 

</longdesc>
<shortdesc lang="en">Manages an Asterisk service</shortdesc>
<parameters>
	<parameter name="directory" required="0">
		<longdesc lang="en">The location of the Asterisk binary.
Defaults to '/usr/sbin'.  </longdesc>
		<shortdesc lang="en">Full path of asterisk</shortdesc>
		<content type="string" default="/usr/sbin"/>
	</parameter>
	<parameter name="cmdline_options" required="0">
		<longdesc lang="en"> Command line options to pass to Asterisk. 
If you're running multiple Asterisk on the same machine, you would put
the configuraiton file here - such as "-C /etc/asterisk/node1/asterisk.conf"</longdesc>
		<shortdesc lang="en">Command line options</shortdesc>
		<content type="string" default=""/>
	</parameter>
	<parameter name="pidfile" required="0">
		<longdesc lang="en">Optional file to read the PID from. 
Defaults to /var/run/asterisk/asterisk.pid</longdesc>
		<shortdesc lang="en">File to read PID from</shortdesc>
		<content type="string" default="/var/run/asterisk/asterisk.pid"/>
	</parameter>
	<parameter name="logfile" required="0">
		<longdesc lang="en"> File to write all Asterisk output to. 
Defaults to /var/run/asterisk/asterisk.out</longdesc>
		<shortdesc lang="en">File for Asterisk output</shortdesc>
		<content type="string" default="/var/run/asterisk/asterisk.out"/>
	</parameter>
	<parameter name="user" required="0">
		<longdesc lang="en">User to run Asterisk as. Note that this is required to be 'apache' for 
FreePBX installs.If you're not using FreePBX you should change this.
Defaults to 'apache' </longdesc>
		<shortdesc lang="en">User to run Asterisk as</shortdesc>
		<content type="string" default="apache"/>
	</parameter>
	<parameter name="group" required="0">
		<longdesc lang="en">Group to run Asterisk as. Note that this is required to be 'apache' for 
FreePBX installs. If you're not using FreePBX you should change this.
Defaults to 'apache' </longdesc>
		<shortdesc lang="en">Group to run Asterisk as</shortdesc>
		<content type="string" default="apache"/>
	</parameter>
	<parameter name="stop_timeout">
		<longdesc lang="en">Waits for this amount of time for Asterisk to finish all calls and shut
down. ('core stop gracefully'). After that time, send 'core stop now', and if asterisk hasn't exited within
5 seconds, Asterisk is forefully shut down. This is done with a kill -9.
Defaults to 30 seconds</longdesc>
		<shortdesc lang="en">Seconds to wait after sending a 'core stop now'</shortdesc>
		<content type="string" default="30"/>
	</parameter>
</parameters>
<actions>
	<action name="start"   timeout="20s" />
	<action name="stop"    timeout="60s" />
	<action name="monitor" depth="0"  timeout="5s" interval="10" />
	<action name="meta-data"  timeout="5" />
	<action name="validate-all"  timeout="5" />
</actions>
</resource-agent>
END
exit 0
}

case "$1" in
	meta-data|metadata|meta_data)
		asterisk_meta
	;;
	start)
		asterisk_start
	;;
	stop)
		asterisk_stop
	;;
	monitor)
		asterisk_monitor
	;;
	validate-all)
		asterisk_validate
	;;
	*)
		ocf_log err "$0 was called with unsupported arguments: $*"
		exit $OCF_ERR_UNIMPLEMENTED
	;;
esac
